#!/bin/sh

_copyright(){ echo "
  ozh lightweight shell extensions
  2008-2014 - anx @ ulzq de (Sebastian Glaser)
  Licensed under GNU GPL v3"; }
_license(){ echo "
  ozh is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2, or (at your option)
  any later version.

  ozh is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this software; see the file COPYING.  If not, write to
  the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
  Boston, MA 02111-1307 USA

  http://www.gnu.org/licenses/gpl.html"; }

_filter_rss(){ sed 's/>/>\n/g;' | sed -n '/<\/title>/{s/<\/title>//;p}' | tail -n +2; }
_format_title(){ awk 'BEGIN{FS=":"}{printf "'$bred$white$bold'%s '$R'%s\n",$1,$2}'; }

_feed_web(){
  local base="$OZH/feed/list"; mkdir -p "$base"; _read_arg
  local task="$base/$_GET_task"
  case "$_GET_action" in
    'add')
      mkdir -p "$task"
      echo "$_GET_url" > "$task/url"
      local interval=60; [ -f "$task/interval" ] && interval=$(cat "$task/interval")
      test -n "$_GET_interval" && interval=$_GET_interval; echo $interval > "$task/interval"
      mime="text/json"; r="{\"status\":\"ok\",\"task\":\"$_GET_task\"}";;
    'del') r="$()";;
    'view') r="$(cat $OZH/feed/list/$_GET_task/cache)";;
    'refresh') ;;
    * ) r="
      <style>
        th {text-align:right;padding-right:1em}
      </style>
      <table>$(for name in $(ls $base);do task="$base/$name"
      local interval=60; [ -f "$task/interval" ] && interval=$(cat "$task/interval")
      echo "<tr><th>$name</th><td>
        <i>$interval</i>
        <a href=\"/feed?action=refresh&task=$name\">refresh</a>
        <a href=\"/feed?action=view&task=$name\">view</a>
        <i>$([ -f $task/cache ] && ls -al $task/cache|cut -f5-8 -d\ )</i>
      </td></tr><!--tr><td colspan=2>
        <iframe src=\"/feed?action=view&task=$name\"></iframe>
      </td></tr-->"
    done)</table>";;
  esac; _reply "$r"; }

_feed_touch(){
  busybox touch -d $(busybox date "+%Y%m%d%H%M.%S" -D "%s" -d $(( $(date +%s) + $2 )) ) "$1"; }

_feed_daemon(){
  local verbose=true
  md5sumonly(){ md5sum $1 | awk '{print $1}'; }
  local url= count= format= task= name= nextrun="0" base="$OZH/feed/list"
  mkdir -p "$base"
  while sleep $nextrun.9;do
    nextrun=3600; touch "$OZH/feed/now";
    for name in $(ls $base);do task="$base/$name"
      FEED_REQUIRE="$task" oz require "feed/$name"; "_feed_${name}_defaults"; "_feed_$name"
      local update=false interval=60; [ -f "$task/interval" ] && interval=$(cat "$task/interval")
      [ "$nextrun" -gt "$interval" ] && export nextrun="$interval"
      [ -f "$task/next" ] && { last=$(cat "$task/next"); lastarg="-H 'If-Modified-Since: $last'"; }
      if [ ! -f "$task/next" ] || [ ! -f "$task/cache" ] || [ "$OZH/feed/now" -nt "$task/next" ]; then
        $verbose && printf "$bred$white$bold $name $R " >&2 
        local tmp=$(mktemp)
        curl -L -si "$url" 2>/dev/null >"$tmp" # "$lastarg"
        local http_status=$(cat "$tmp"|head -n1|busybox sed 's/^HTTP\/... //'|cut -f 1 -d ' ')
        local http_modified=$(cat "$tmp" |grep "^Last-Modified:"|busybox sed "s/Last-Modified: //")
        if test "$http_status" -eq 200 -o "$http_status" -eq 302 -o "$http_status" -eq 0; then
          $verbose && printf "$bgreen$white$bold $http_status $R " >&2 
          [ -z "$http_modified" ] && echo -n "$http_modified" > "$task/next"
          echo "$result"|busybox sed '1,/^.$/d' > "$task/cache"
          _feed_touch "$task/next" "$interval"
          ( cat "$tmp" | "$format" > "$task/cache"; ) 2>/dev/null
          [ -f "$task/last" ] || touch "$task/last"
          if [ ! "$(md5sumonly "$task/cache")" = "$(md5sumonly "$task/last")" ];then
            $verbose && printf "$bgreen$white$bold news $R " >&2 
            cp "$task/cache" "$task/last"; update="true";
            oz hook run feed/update "$name" "$(cat "$task/cache" | head -n1)"
          fi
        fi; rm "$tmp"; fi;done
      $verbose && printf "$bblue$white$bold $nextrun $R " >&2 
    done; }

_install_feed(){
  [ -d "$OZH/uht" ] && { echo ". $OZH/feed/feed; _feed_web" > "$OZH/uht/feed"; }
  for i in fefe nne spin heise eztv telepolis fltrack;do
    FEED_REQUIRE="$i" oz install feed/$i; mkdir -p "$OZH/feed/list/$i"; done; }
